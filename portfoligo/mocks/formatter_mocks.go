// Code generated by MockGen. DO NOT EDIT.
// Source: formatter.go
//
// Generated by this command:
//
//	mockgen -source=formatter.go -destination=mocks/formatter_mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "portfoli-go/domain"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTargetWriter is a mock of TargetWriter interface.
type MockTargetWriter struct {
	ctrl     *gomock.Controller
	recorder *MockTargetWriterMockRecorder
}

// MockTargetWriterMockRecorder is the mock recorder for MockTargetWriter.
type MockTargetWriterMockRecorder struct {
	mock *MockTargetWriter
}

// NewMockTargetWriter creates a new mock instance.
func NewMockTargetWriter(ctrl *gomock.Controller) *MockTargetWriter {
	mock := &MockTargetWriter{ctrl: ctrl}
	mock.recorder = &MockTargetWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTargetWriter) EXPECT() *MockTargetWriterMockRecorder {
	return m.recorder
}

// WriteInfoLine mocks base method.
func (m *MockTargetWriter) WriteInfoLine(s string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteInfoLine", s)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteInfoLine indicates an expected call of WriteInfoLine.
func (mr *MockTargetWriterMockRecorder) WriteInfoLine(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteInfoLine", reflect.TypeOf((*MockTargetWriter)(nil).WriteInfoLine), s)
}

// WritePortfolioLine mocks base method.
func (m *MockTargetWriter) WritePortfolioLine(name string, weight float64, highlight bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WritePortfolioLine", name, weight, highlight)
	ret0, _ := ret[0].(error)
	return ret0
}

// WritePortfolioLine indicates an expected call of WritePortfolioLine.
func (mr *MockTargetWriterMockRecorder) WritePortfolioLine(name, weight, highlight any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WritePortfolioLine", reflect.TypeOf((*MockTargetWriter)(nil).WritePortfolioLine), name, weight, highlight)
}

// MockOrderedFileFormatter is a mock of OrderedFileFormatter interface.
type MockOrderedFileFormatter struct {
	ctrl     *gomock.Controller
	recorder *MockOrderedFileFormatterMockRecorder
}

// MockOrderedFileFormatterMockRecorder is the mock recorder for MockOrderedFileFormatter.
type MockOrderedFileFormatterMockRecorder struct {
	mock *MockOrderedFileFormatter
}

// NewMockOrderedFileFormatter creates a new mock instance.
func NewMockOrderedFileFormatter(ctrl *gomock.Controller) *MockOrderedFileFormatter {
	mock := &MockOrderedFileFormatter{ctrl: ctrl}
	mock.recorder = &MockOrderedFileFormatterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderedFileFormatter) EXPECT() *MockOrderedFileFormatterMockRecorder {
	return m.recorder
}

// Output mocks base method.
func (m *MockOrderedFileFormatter) Output(portflio map[string]domain.PortfolioLine) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Output", portflio)
	ret0, _ := ret[0].(error)
	return ret0
}

// Output indicates an expected call of Output.
func (mr *MockOrderedFileFormatterMockRecorder) Output(portflio any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Output", reflect.TypeOf((*MockOrderedFileFormatter)(nil).Output), portflio)
}
